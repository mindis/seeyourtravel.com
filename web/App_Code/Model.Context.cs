//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Core.Objects;
using System.Linq;

public partial class SeeYourTravelEntities : DbContext
{
    public SeeYourTravelEntities()
        : base("name=SeeYourTravelEntities")
    {
    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }

    public virtual DbSet<Image> Images { get; set; }
    public virtual DbSet<ImageUser> ImageUsers { get; set; }
    public virtual DbSet<Place> Places { get; set; }
    public virtual DbSet<PlaceImage> PlaceImages { get; set; }
    public virtual DbSet<PlaceType> PlaceTypes { get; set; }
    public virtual DbSet<PlaceTypePlace> PlaceTypePlaces { get; set; }
    public virtual DbSet<PlaceUser> PlaceUsers { get; set; }
    public virtual DbSet<Role> Roles { get; set; }
    public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
    public virtual DbSet<Track> Tracks { get; set; }
    public virtual DbSet<TrackLocalization> TrackLocalizations { get; set; }
    public virtual DbSet<TrackUser> TrackUsers { get; set; }
    public virtual DbSet<User> Users { get; set; }
    public virtual DbSet<UserLocation> UserLocations { get; set; }
    public virtual DbSet<UserLogin> UserLogins { get; set; }
    public virtual DbSet<UserRole> UserRoles { get; set; }
    public virtual DbSet<Version> Versions { get; set; }
    public virtual DbSet<GetAllRoughUserLocation> GetAllRoughUserLocations { get; set; }

    [DbFunction("SeeYourTravelEntities", "GetAllTracks")]
    public virtual IQueryable<GetAllTracks_Result> GetAllTracks()
    {
        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAllTracks_Result>("[SeeYourTravelEntities].[GetAllTracks]()");
    }

    [DbFunction("SeeYourTravelEntities", "GetTrackForUserByIdOrName")]
    public virtual IQueryable<GetTrackForUserByIdOrName_Result> GetTrackForUserByIdOrName(Nullable<System.Guid> userID, Nullable<System.Guid> trackId, string name)
    {
        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));

        var trackIdParameter = trackId.HasValue ?
            new ObjectParameter("TrackId", trackId) :
            new ObjectParameter("TrackId", typeof(System.Guid));

        var nameParameter = name != null ?
            new ObjectParameter("Name", name) :
            new ObjectParameter("Name", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTrackForUserByIdOrName_Result>("[SeeYourTravelEntities].[GetTrackForUserByIdOrName](@UserID, @TrackId, @Name)", userIDParameter, trackIdParameter, nameParameter);
    }

    [DbFunction("SeeYourTravelEntities", "GetUserandPublicTracks")]
    public virtual IQueryable<GetUserandPublicTracks_Result> GetUserandPublicTracks(Nullable<System.Guid> userID, string locale)
    {
        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));

        var localeParameter = locale != null ?
            new ObjectParameter("Locale", locale) :
            new ObjectParameter("Locale", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetUserandPublicTracks_Result>("[SeeYourTravelEntities].[GetUserandPublicTracks](@UserID, @Locale)", userIDParameter, localeParameter);
    }

    [DbFunction("SeeYourTravelEntities", "GetUserTracks")]
    public virtual IQueryable<GetUserTracks_Result> GetUserTracks(Nullable<System.Guid> userID)
    {
        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));

        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetUserTracks_Result>("[SeeYourTravelEntities].[GetUserTracks](@UserID)", userIDParameter);
    }

    [DbFunction("SeeYourTravelEntities", "IsAdmin")]
    public virtual IQueryable<IsAdmin_Result> IsAdmin(Nullable<System.Guid> userID)
    {
        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));

        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<IsAdmin_Result>("[SeeYourTravelEntities].[IsAdmin](@UserID)", userIDParameter);
    }

    [DbFunction("SeeYourTravelEntities", "IsGuest")]
    public virtual IQueryable<IsGuest_Result> IsGuest(Nullable<System.Guid> userID)
    {
        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));

        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<IsGuest_Result>("[SeeYourTravelEntities].[IsGuest](@UserID)", userIDParameter);
    }

    public virtual ObjectResult<GetFriendsLocations_Result> GetFriendsLocations(Nullable<System.Guid> userID)
    {
        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFriendsLocations_Result>("GetFriendsLocations", userIDParameter);
    }

    [DbFunction("SeeYourTravelEntities", "GetUserImages")]
    public virtual IQueryable<GetUserImages_Result> GetUserImages(Nullable<System.Guid> userID)
    {
        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));

        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetUserImages_Result>("[SeeYourTravelEntities].[GetUserImages](@UserID)", userIDParameter);
    }

    [DbFunction("SeeYourTravelEntities", "GetUserAndPublicImagesByLocation")]
    public virtual IQueryable<GetUserAndPublicImagesByLocation_Result> GetUserAndPublicImagesByLocation(Nullable<System.Guid> userID, Nullable<double> minLat, Nullable<double> minLng, Nullable<double> maxLat, Nullable<double> maxLng, Nullable<int> from, Nullable<int> to)
    {
        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));

        var minLatParameter = minLat.HasValue ?
            new ObjectParameter("MinLat", minLat) :
            new ObjectParameter("MinLat", typeof(double));

        var minLngParameter = minLng.HasValue ?
            new ObjectParameter("MinLng", minLng) :
            new ObjectParameter("MinLng", typeof(double));

        var maxLatParameter = maxLat.HasValue ?
            new ObjectParameter("MaxLat", maxLat) :
            new ObjectParameter("MaxLat", typeof(double));

        var maxLngParameter = maxLng.HasValue ?
            new ObjectParameter("MaxLng", maxLng) :
            new ObjectParameter("MaxLng", typeof(double));

        var fromParameter = from.HasValue ?
            new ObjectParameter("From", from) :
            new ObjectParameter("From", typeof(int));

        var toParameter = to.HasValue ?
            new ObjectParameter("To", to) :
            new ObjectParameter("To", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetUserAndPublicImagesByLocation_Result>("[SeeYourTravelEntities].[GetUserAndPublicImagesByLocation](@UserID, @MinLat, @MinLng, @MaxLat, @MaxLng, @From, @To)", userIDParameter, minLatParameter, minLngParameter, maxLatParameter, maxLngParameter, fromParameter, toParameter);
    }

    [DbFunction("SeeYourTravelEntities", "GetUserAndPublicPlacesByLocation")]
    public virtual IQueryable<GetUserAndPublicPlacesByLocation_Result> GetUserAndPublicPlacesByLocation(Nullable<System.Guid> userID, string types, Nullable<double> minLat, Nullable<double> minLng, Nullable<double> maxLat, Nullable<double> maxLng, Nullable<int> from, Nullable<int> to)
    {
        var userIDParameter = userID.HasValue ?
            new ObjectParameter("UserID", userID) :
            new ObjectParameter("UserID", typeof(System.Guid));

        var typesParameter = types != null ?
            new ObjectParameter("Types", types) :
            new ObjectParameter("Types", typeof(string));

        var minLatParameter = minLat.HasValue ?
            new ObjectParameter("MinLat", minLat) :
            new ObjectParameter("MinLat", typeof(double));

        var minLngParameter = minLng.HasValue ?
            new ObjectParameter("MinLng", minLng) :
            new ObjectParameter("MinLng", typeof(double));

        var maxLatParameter = maxLat.HasValue ?
            new ObjectParameter("MaxLat", maxLat) :
            new ObjectParameter("MaxLat", typeof(double));

        var maxLngParameter = maxLng.HasValue ?
            new ObjectParameter("MaxLng", maxLng) :
            new ObjectParameter("MaxLng", typeof(double));

        var fromParameter = from.HasValue ?
            new ObjectParameter("From", from) :
            new ObjectParameter("From", typeof(int));

        var toParameter = to.HasValue ?
            new ObjectParameter("To", to) :
            new ObjectParameter("To", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetUserAndPublicPlacesByLocation_Result>("[SeeYourTravelEntities].[GetUserAndPublicPlacesByLocation](@UserID, @Types, @MinLat, @MinLng, @MaxLat, @MaxLng, @From, @To)", userIDParameter, typesParameter, minLatParameter, minLngParameter, maxLatParameter, maxLngParameter, fromParameter, toParameter);
    }
}
